{"ast":null,"code":"import axios from \"axios\";\nconst BASE_URL = process.env.REACT_APP_BASE_URL || \"http://localhost:3001\";\n\n/** API Class.\n *\n * Static class tying together methods used to get/send to to the API.\n * There shouldn't be any frontend-specific stuff here, and there shouldn't\n * be any API-aware stuff elsewhere in the frontend.\n *\n */\n\nclass JoblyApi {\n  // the token for interactive with the API will be stored here.\n\n  static async request(endpoint, data = {}, method = \"get\") {\n    console.debug(\"API Call:\", endpoint, data, method);\n\n    //there are multiple ways to pass an authorization token, this is how you pass it in the header.\n    //this has been provided to show you another way to pass the token. you are only expected to read this code for this project.\n    const url = `${BASE_URL}/${endpoint}`;\n    const headers = {\n      Authorization: `Bearer ${JoblyApi.token}`\n    };\n    const params = method === \"get\" ? data : {};\n    try {\n      const response = await axios({\n        url,\n        method,\n        data,\n        params,\n        headers\n      });\n      console.log(\"API Response:\", response);\n      return response.data;\n    } catch (err) {\n      var _err$response, _err$response$data, _err$response$data$er;\n      console.error(\"API Error:\", err.response);\n      // let message = err.response.data.error.message;\n      // throw Array.isArray(message) ? message : [message];\n      throw new Error(((_err$response = err.response) === null || _err$response === void 0 ? void 0 : (_err$response$data = _err$response.data) === null || _err$response$data === void 0 ? void 0 : (_err$response$data$er = _err$response$data.error) === null || _err$response$data$er === void 0 ? void 0 : _err$response$data$er.message) || \"API request failed\");\n    }\n  }\n\n  // Individual API routes\n\n  /** Get details on a company by handle. */\n\n  static async getCompany(handle) {\n    let res = await this.request(`companies/${handle}`);\n    return res.company;\n  }\n  static async getCompanies() {\n    let res = await this.request(\"companies\");\n    return res.companies;\n  }\n  static async getJobs() {\n    let res = await this.request(\"jobs\");\n    return res.jobs;\n  }\n  static async login(data) {\n    let res = await this.request(\"auth/token\", data, \"post\");\n    return res.token;\n  }\n  static async getCurrentUser() {\n    let res = await this.request(\"auth/me\");\n    return res.user;\n  }\n  static async signup(data) {\n    let res = await this.request(\"auth/register\", data, \"post\");\n    return res.token;\n  }\n  static async updateProfile(username, data) {\n    let res = await this.request(`users/${username}`, data, \"patch\");\n    return res.user;\n  }\n\n  // obviously, you'll add a lot here ...\n}\n\n// for now, put token (\"testuser\" / \"password\" on class)\nJoblyApi.token = \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VybmFtZ\" + \"SI6InRlc3R1c2VyIiwiaXNBZG1pbiI6ZmFsc2UsImlhdCI6MTU5ODE1OTI1OX0.\" + \"FtrMwBQwe6Ue-glIFgz_Nf8XxRT2YecFCiSpYL0fCXc\";\nexport default JoblyApi;","map":{"version":3,"names":["axios","BASE_URL","process","env","REACT_APP_BASE_URL","JoblyApi","request","endpoint","data","method","console","debug","url","headers","Authorization","token","params","response","log","err","_err$response","_err$response$data","_err$response$data$er","error","Error","message","getCompany","handle","res","company","getCompanies","companies","getJobs","jobs","login","getCurrentUser","user","signup","updateProfile","username"],"sources":["/home/jade/react-jobly/jobly-frontend/src/api.js"],"sourcesContent":["import axios from \"axios\";\n\nconst BASE_URL = process.env.REACT_APP_BASE_URL || \"http://localhost:3001\";\n\n/** API Class.\n *\n * Static class tying together methods used to get/send to to the API.\n * There shouldn't be any frontend-specific stuff here, and there shouldn't\n * be any API-aware stuff elsewhere in the frontend.\n *\n */\n\nclass JoblyApi {\n  // the token for interactive with the API will be stored here.\n  static token;\n\n  static async request(endpoint, data = {}, method = \"get\") {\n    console.debug(\"API Call:\", endpoint, data, method);\n\n    //there are multiple ways to pass an authorization token, this is how you pass it in the header.\n    //this has been provided to show you another way to pass the token. you are only expected to read this code for this project.\n    const url = `${BASE_URL}/${endpoint}`;\n    const headers = { Authorization: `Bearer ${JoblyApi.token}` };\n    const params = (method === \"get\")\n        ? data\n        : {};\n\n    try {\n      const response = await axios({ url, method, data, params, headers });\n      console.log(\"API Response:\", response);\n      return response.data;\n      \n    } catch (err) {\n      console.error(\"API Error:\", err.response);\n      // let message = err.response.data.error.message;\n      // throw Array.isArray(message) ? message : [message];\n      throw new Error(err.response?.data?.error?.message || \"API request failed\");\n    }\n  }\n\n  // Individual API routes\n\n  /** Get details on a company by handle. */\n\n  static async getCompany(handle) {\n    let res = await this.request(`companies/${handle}`);\n    return res.company;\n  }\n\n  static async getCompanies() {\n    let res = await this.request(\"companies\");\n    return res.companies;\n  }\n\n  static async getJobs() {\n    let res = await this.request(\"jobs\");\n    return res.jobs;\n  }\n\n  static async login(data) {\n    let res = await this.request(\"auth/token\", data, \"post\");\n    return res.token;\n  }\n\n  static async getCurrentUser() {\n    let res = await this.request(\"auth/me\");\n    return res.user;\n  }\n  \n\n  static async signup(data) {\n    let res = await this.request(\"auth/register\", data, \"post\");\n    return res.token;\n  }\n\n  static async updateProfile(username, data) {\n    let res = await this.request(`users/${username}`, data, \"patch\");\n    return res.user;\n  }\n\n  // obviously, you'll add a lot here ...\n}\n\n// for now, put token (\"testuser\" / \"password\" on class)\nJoblyApi.token = \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VybmFtZ\" +\n    \"SI6InRlc3R1c2VyIiwiaXNBZG1pbiI6ZmFsc2UsImlhdCI6MTU5ODE1OTI1OX0.\" +\n    \"FtrMwBQwe6Ue-glIFgz_Nf8XxRT2YecFCiSpYL0fCXc\";\n\n\nexport default JoblyApi;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}