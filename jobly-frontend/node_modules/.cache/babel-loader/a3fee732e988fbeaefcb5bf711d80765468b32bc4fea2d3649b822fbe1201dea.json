{"ast":null,"code":"import axios from \"axios\";\nconst BASE_URL = process.env.REACT_APP_BASE_URL || \"http://localhost:3001\";\nclass JoblyApi {\n  static async request(endpoint, data = {}, method = \"get\") {\n    console.debug(\"API Call:\", endpoint, data, method);\n    console.log(\"Token being used:\", JoblyApi.token);\n    const url = `${BASE_URL}/${endpoint}`;\n    const headers = {\n      Authorization: `Bearer ${JoblyApi.token}`\n    };\n    const params = method === \"get\" ? data : {};\n    try {\n      const response = await axios({\n        url,\n        method,\n        data,\n        params,\n        headers\n      });\n      console.log(\"API Response:\", response);\n      return response.data;\n    } catch (err) {\n      var _err$response, _err$response$data, _err$response$data$er;\n      console.error(\"API Error:\", err.response);\n      throw new Error(((_err$response = err.response) === null || _err$response === void 0 ? void 0 : (_err$response$data = _err$response.data) === null || _err$response$data === void 0 ? void 0 : (_err$response$data$er = _err$response$data.error) === null || _err$response$data$er === void 0 ? void 0 : _err$response$data$er.message) || \"API request failed\");\n    }\n  }\n\n  // Individual API routes\n  static async getCompany(handle) {\n    let res = await this.request(`companies/${handle}`);\n    return res.company;\n  }\n  static async getCompanies() {\n    let res = await this.request(\"companies\");\n    return res.companies;\n  }\n  static async getJobs() {\n    let res = await this.request(\"jobs\");\n    return res.jobs;\n  }\n  static async login(data) {\n    let res = await this.request(\"auth/token\", data, \"post\");\n    localStorage.setItem(\"token\", res.token); // Store the token in localStorage\n    JoblyApi.token = res.token; // Set token for future API requests\n    return res.token;\n  }\n  static async getCurrentUser(username) {\n    let res = await this.request(`users/${username}`);\n    return res.user;\n  }\n  static async signup(data) {\n    let res = await this.request(\"auth/register\", data, \"post\");\n    JoblyApi.token = res.token;\n    return res.token;\n  }\n  static async updateProfile(username, data) {\n    let res = await this.request(`users/${username}`, data, \"patch\");\n    return res.user;\n  }\n}\n// the token for interacting with the API will be stored here.\nJoblyApi.token = localStorage.getItem(\"token\");\nexport default JoblyApi;","map":{"version":3,"names":["axios","BASE_URL","process","env","REACT_APP_BASE_URL","JoblyApi","request","endpoint","data","method","console","debug","log","token","url","headers","Authorization","params","response","err","_err$response","_err$response$data","_err$response$data$er","error","Error","message","getCompany","handle","res","company","getCompanies","companies","getJobs","jobs","login","localStorage","setItem","getCurrentUser","username","user","signup","updateProfile","getItem"],"sources":["/home/jade/react-jobly/jobly-frontend/src/api.js"],"sourcesContent":["import axios from \"axios\";\n\nconst BASE_URL = process.env.REACT_APP_BASE_URL || \"http://localhost:3001\";\n\nclass JoblyApi {\n  // the token for interacting with the API will be stored here.\n  static token = localStorage.getItem(\"token\");\n\n  static async request(endpoint, data = {}, method = \"get\") {\n    console.debug(\"API Call:\", endpoint, data, method);\n    console.log(\"Token being used:\", JoblyApi.token);\n\n    const url = `${BASE_URL}/${endpoint}`;\n    const headers = { Authorization: `Bearer ${JoblyApi.token}` };\n    const params = method === \"get\" ? data : {};\n\n    try {\n      const response = await axios({ url, method, data, params, headers });\n      console.log(\"API Response:\", response);\n      return response.data;\n    } catch (err) {\n      console.error(\"API Error:\", err.response);\n      throw new Error(err.response?.data?.error?.message || \"API request failed\");\n    }\n  }\n\n  // Individual API routes\n  static async getCompany(handle) {\n    let res = await this.request(`companies/${handle}`);\n    return res.company;\n  }\n\n  static async getCompanies() {\n    let res = await this.request(\"companies\");\n    return res.companies;\n  }\n\n  static async getJobs() {\n    let res = await this.request(\"jobs\");\n    return res.jobs;\n  }\n\n  static async login(data) {\n    let res = await this.request(\"auth/token\", data, \"post\");\n    localStorage.setItem(\"token\", res.token); // Store the token in localStorage\n    JoblyApi.token = res.token; // Set token for future API requests\n    return res.token;\n  }\n\n  static async getCurrentUser(username) {\n    let res = await this.request(`users/${username}`);\n    return res.user;\n  }\n\n  static async signup(data) {\n    let res = await this.request(\"auth/register\", data, \"post\");\n    JoblyApi.token = res.token;\n    return res.token;\n  }\n\n  static async updateProfile(username, data) {\n    let res = await this.request(`users/${username}`, data, \"patch\");\n    return res.user;\n  }\n}\n\nexport default JoblyApi;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}